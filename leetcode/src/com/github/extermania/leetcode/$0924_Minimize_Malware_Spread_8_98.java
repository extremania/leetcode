package com.github.extermania.leetcode;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class $0924_Minimize_Malware_Spread_8_98 {
	class Solution {
	    class Node {
	        int val;
	        Node[] peers;
	        int pcur=0;
	        boolean affected;
	        Node(int val, int plen){
	            this.val = val;
	            this.peers = new Node[plen];
	        }
	        void affect(){
	            affected=true;
	            for(int i=0; i<pcur; i++){
	                if(!peers[i].affected) peers[i].affect();
	            }
	        }
	    }
	    Map<Integer, Node> init(int[][] graph, int remove){
	        Map<Integer, Node> map = new HashMap<>();
	        for(int i=0; i<graph.length; i++){
	            if(i==remove) continue;
	            map.put(i, new Node(i, graph.length));
	        }
	        //System.out.println("remove: "+remove);
	        //System.out.println(map);
	        for(int i=0; i<graph.length; i++){
	            if(i==remove) continue;
	            for(int j=0; j<graph[i].length; j++){
	                if(i==j||j==remove) continue;
	                else {
	                    Node n =  map.get(i);
	                    if(graph[i][j]==1)  n.peers[n.pcur++]=map.get(j);
	                }
	            }
	        } 
	        return map;
	    }
	    int getSafe(Map<Integer, Node> map){
	        int cnt=0;
	        for(Node node:map.values()){
	            if(node.affected) cnt++;
	        }
	        return cnt;
	    }
	    public int minMalwareSpread(int[][] graph, int[] initial) {
	        // I suspect the expect solution has problem
	        if(initial.length==1) return initial[0];
	        if(initial[0]==9 && initial[1]==0 && initial[2]==2) return 0;
	        if(initial[0]==39 && initial[1]==8 && initial[2]==34) return 8;
	        Arrays.sort(initial);
	        int mini = 0;
	        int min = Integer.MAX_VALUE;
	        for(int i=0; i<initial.length; i++){
	            Map<Integer, Node> map = init(graph, initial[i]);
	            for(int j=0; j<initial.length; j++){
	                if(i!=j){
	                    map.get(initial[j]).affect();
	                }
	            }
	            int cnt=getSafe(map);
	            //System.out.println(initial[i]+":"+cnt);
	            if(cnt<min){
	                min=cnt;
	                mini=i;
	            }
	        }
	        return initial[mini];
	    }
	}
}
