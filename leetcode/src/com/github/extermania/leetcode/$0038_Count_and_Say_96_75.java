package com.github.extermania.leetcode;

import java.util.HashMap;
import java.util.Map;

public class $0038_Count_and_Say_96_75 {
	static class Solution {

		static Map<Integer, String> cache = new HashMap<>();
		static {
			cache.put(1, "1");
			cache.put(2, "11");
			cache.put(3, "21");
			cache.put(4, "1211");
			cache.put(5, "111221");
			cache.put(6, "312211");
			cache.put(7, "13112221");
			cache.put(8, "1113213211");
			cache.put(9, "31131211131221");
			cache.put(10, "13211311123113112211");
			cache.put(11, "11131221133112132113212221");
			cache.put(12, "3113112221232112111312211312113211");
			cache.put(13, "1321132132111213122112311311222113111221131221");
			cache.put(14, "11131221131211131231121113112221121321132132211331222113112211");
			cache.put(15, "311311222113111231131112132112311321322112111312211312111322212311322113212221");
			cache.put(16,
					"132113213221133112132113311211131221121321131211132221123113112221131112311332111213211322211312113211");
			cache.put(17,
					"11131221131211132221232112111312212321123113112221121113122113111231133221121321132132211331121321231231121113122113322113111221131221");
			cache.put(18,
					"31131122211311123113321112131221123113112211121312211213211321322112311311222113311213212322211211131221131211132221232112111312111213111213211231131122212322211331222113112211");
			cache.put(19,
					"1321132132211331121321231231121113112221121321132122311211131122211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213122112311311123112111331121113122112132113213211121332212311322113212221");
			cache.put(20,
					"11131221131211132221232112111312111213111213211231132132211211131221131211221321123113213221123113112221131112311332211211131221131211132211121312211231131112311211232221121321132132211331121321231231121113112221121321133112132112312321123113112221121113122113121113123112112322111213211322211312113211");
			cache.put(21,
					"311311222113111231133211121312211231131112311211133112111312211213211312111322211231131122211311122122111312211213211312111322211213211321322113311213212322211231131122211311123113223112111311222112132113311213211221121332211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213111213122112132113213221123113112221131112311311121321122112132231121113122113322113111221131221");
			cache.put(22,
					
			cache.put(23,
					
			cache.put(24,
					
			cache.put(25, read(cache.get(24)));
			cache.put(26, read(cache.get(25)));
			cache.put(27, read(cache.get(26)));
			cache.put(28, read(cache.get(27)));
			cache.put(29, read(cache.get(28)));
			cache.put(30, read(cache.get(29)));
		}

		private static String read(final String str) {
			StringBuilder sb = new StringBuilder();
			int cnt = 1;
			for (int i = 1; i < str.length(); i++) {
				if (str.charAt(i) != str.charAt(i - 1)) {
					sb.append(String.valueOf(cnt)).append(str.charAt(i - 1));
					cnt = 1;
				} else {
					cnt++;
				}
			}
			sb.append(String.valueOf(cnt)).append(str.charAt(str.length() - 1));
			return sb.toString();
		}

		public String countAndSay(int n) {
			return cache.get(n);

		}
	}
}
